package  {		import flash.display.*;	import flash.geom.*;	import flash.events.*;	import flash.net.*;	import flash.text.*;	import fl.transitions.*;	import fl.transitions.easing.*;	import flash.ui.*;	import flash.filters.*;		public class ButtonChoice extends MovieClip {				internal var main:BenefitCalculator;		internal var bttnWidth:Number;		internal var inTransition:String;		internal var outTransition:String;		internal var theLabel:String;		internal var theVariable:String;		internal var theValue:String;		internal var nxtAction:String;		internal var whichFile:String;		internal var nxtSlide:Number;		public function TextInput() {			init();		}		private function init():void {			//do nothing		}				public function createButton(butXPos:Number, butYPos:Number, butWidth:Number, butLabel:String, butVariable:String, butValue:String, butInTrans:String, butOutTrans:String, nxtA:String, whichF:String, nxtS:Number):void {			bttnWidth = butWidth;			theVariable = butVariable;			theValue = butValue;			inTransition = butInTrans;			outTransition = butOutTrans;			nxtAction = nxtA;			whichFile = whichF;			nxtSlide = nxtS;			var colors:Array = [0xAAAAAA, 0xBBBBBB, 0x999999, 0x777777]; //sets the colors for the two halves of the gradient			var alphas:Array = [1, 1, 1, 1]; //sets both colors to opaque			var ratios:Array = [0, 50, 200, 255]; //places starting point of colors using values from 0-255			var matrix:Matrix = new Matrix();			matrix.createGradientBox(butWidth, 35, 1.57, 0, 0);			graphics.beginGradientFill(GradientType.LINEAR, colors, alphas, ratios, matrix);			graphics.drawRoundRect(0, 0, butWidth, 35, 15, 15);			graphics.endFill();			graphics.lineStyle(2, 0x777777, 1);			graphics.drawRoundRect(0, 0, butWidth, 35, 15, 15);			this.x = butXPos;			this.y = butYPos;			var myFont:Font = new AvenirR(); //create the instance of the embedded font class			var format:TextFormat = new TextFormat(myFont.fontName, 20, 0xFFFFFF); //create the text formatting			var t:TextField = new TextField(); //create the text field			t.embedFonts = true; //set it to use embedded fonts			t.defaultTextFormat = format; //apply the text format			t.text = butLabel;			t.selectable = false;			t.sharpness = -100;			t.thickness = 200;			t.x = 10; //set the x position			t.y = 5; //set the y position			t.width = butWidth; //set the width of the display area/**/			addChild(t); //add to this objects display list			this.addEventListener(MouseEvent.MOUSE_OVER, mouseOverListener, false, 0, true);			this.addEventListener(MouseEvent.MOUSE_OUT, mouseOutListener, false, 0, true);			this.addEventListener(MouseEvent.CLICK, mouseClickListener, false, 0, true);			if (inTransition=="BLINK") { //set up the properties for the BLINK transition				main.currentButton.alpha = 0;				main.currentButton.y = main.currentButton.y-50;			} else if (inTransition=="FADE") { //set up the properties of the FADE transition				main.currentButton.alpha = 0;			}			var filter:DropShadowFilter = new DropShadowFilter(10, 90, 0x999999, 1, 25, 25, .4);			main.currentButton.filters = [filter];			main.slideContents.addChild(main.currentButton);			main.visualManager.callButtonIn(main.currentButton);		}				private function mouseClickListener(e:MouseEvent):void {			main.audioManager.stopAudio();			main.goBack.visible = false;			if(theVariable!="NONE") {				main.userData.postData(theVariable, theValue);				trace(theVariable + " = " + main.userData[theVariable]);				main.visualManager.clearScreen(nxtAction, whichFile, nxtSlide);			} else {				main.audioManager.triggerAudio(whichFile);			}		}				private function mouseOverListener(e:MouseEvent):void {			var colors:Array = [0xBBBBBB, 0xCCCCCC, 0xAAAAAA, 0x888888]; //sets the colors for the two halves of the gradient			var alphas:Array = [1, 1, 1, 1]; //sets both colors to opaque			var ratios:Array = [0, 50, 200, 255]; //places starting point of colors using values from 0-255			var matrix:Matrix = new Matrix();			matrix.createGradientBox(bttnWidth, 35, 1.57, 0, 0);			graphics.clear();			graphics.beginGradientFill(GradientType.LINEAR, colors, alphas, ratios, matrix);			graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);			graphics.endFill();			graphics.lineStyle(2, 0x666666, 1);			graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);		}				private function mouseOutListener(e:MouseEvent):void {			var colors:Array = [0xAAAAAA, 0xBBBBBB, 0x999999, 0x777777]; //sets the colors for the two halves of the gradient			var alphas:Array = [1, 1, 1, 1]; //sets both colors to opaque			var ratios:Array = [0, 50, 200, 255]; //places starting point of colors using values from 0-255			var matrix:Matrix = new Matrix();			matrix.createGradientBox(bttnWidth, 35, 1.57, 0, 0);			graphics.clear();			graphics.beginGradientFill(GradientType.LINEAR, colors, alphas, ratios, matrix);			graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);			graphics.endFill();			graphics.lineStyle(2, 0x777777, 1);			graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);		}	}}