package  {		import flash.display.*;	import flash.geom.*;	import flash.events.*;	import flash.net.*;	import flash.text.*;	import fl.transitions.*;	import fl.transitions.easing.*;	import flash.ui.*;	import flash.filters.*;		public class CheckboxOption extends MovieClip {				internal var main:BenefitCalculator;		internal var bttnWidth:Number;		internal var inTransition:String;		internal var outTransition:String;		internal var theLabel:String;		internal var theVariable:String;		internal var theValue:String = "FALSE";		public function TextInput() {			init();		}		private function init():void {			//do nothing		}				public function createCheckbox(checkXPos:Number, checkYPos:Number, checkWidth:Number, checkLabel:String, checkVariable:String, checkInTrans:String, checkOutTrans:String):void {			bttnWidth = checkWidth;			theVariable = checkVariable;			inTransition = checkInTrans;			outTransition = checkOutTrans;			var colors:Array = [0xAAAAAA, 0xBBBBBB, 0x999999, 0x777777]; //sets the colors for the two halves of the gradient			var alphas:Array = [1, 1, 1, 1]; //sets both colors to opaque			var ratios:Array = [0, 50, 200, 255]; //places starting point of colors using values from 0-255			var matrix:Matrix = new Matrix();			matrix.createGradientBox(checkWidth, 35, 1.57, 0, 0);			graphics.beginGradientFill(GradientType.LINEAR, colors, alphas, ratios, matrix);			graphics.drawRoundRect(0, 0, checkWidth, 35, 15, 15);			graphics.endFill();			graphics.beginFill(0xFFFFFF, 1);			graphics.drawRoundRect(-30, 7, 20, 20, 5, 5);			graphics.endFill();			graphics.lineStyle(2, 0x777777, 1);			graphics.drawRoundRect(0, 0, checkWidth, 35, 15, 15);			graphics.drawRoundRect(-30, 7, 20, 20, 5, 5);			x = checkXPos;			y = checkYPos;			var myFont:Font = new AvenirR(); //create the instance of the embedded font class			var format:TextFormat = new TextFormat(myFont.fontName, 20, 0xFFFFFF); //create the text formatting			var t:TextField = new TextField(); //create the text field			t.embedFonts = true; //set it to use embedded fonts			t.defaultTextFormat = format; //apply the text format			t.text = checkLabel;			t.selectable = false;			t.sharpness = -100;			t.thickness = 200;			t.x = 10; //set the x position			t.y = 5; //set the y position			t.width = checkWidth; //set the width of the display area/**/			addChild(t); //add to this objects display list			this.addEventListener(MouseEvent.MOUSE_OVER, mouseOverListener, false, 0, true);			this.addEventListener(MouseEvent.MOUSE_OUT, mouseOutListener, false, 0, true);			this.addEventListener(MouseEvent.CLICK, mouseClickListener, false, 0, true);			if (inTransition=="BLINK") { //set up the properties for the BLINK transition				main.currentCheckbox.alpha = 0;				main.currentCheckbox.y = main.currentCheckbox.y-50;			} else if (inTransition=="FADE") { //set up the properties of the FADE transition				main.currentCheckbox.alpha = 0;			}			var filter:DropShadowFilter = new DropShadowFilter(10, 90, 0x999999, 1, 25, 25, .4);			main.currentCheckbox.filters = [filter];			main.slideContents.addChild(main.currentCheckbox);			main.visualManager.callCheckboxIn(main.currentCheckbox);		}				private function mouseClickListener(e:MouseEvent):void {			if (theValue=="FALSE") {				theValue = "TRUE";				var colorsC:Array = [0xAAAAAA, 0xBBBBBB, 0x999999, 0x777777]; //sets the colors for the two halves of the gradient				var alphasC:Array = [1, 1, 1, 1]; //sets both colors to opaque				var ratiosC:Array = [0, 50, 200, 255]; //places starting point of colors using values from 0-255				var matrixC:Matrix = new Matrix();				matrixC.createGradientBox(bttnWidth, 35, 1.57, 0, 0);				graphics.clear();				graphics.beginGradientFill(GradientType.LINEAR, colorsC, alphasC, ratiosC, matrixC);				graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);				graphics.endFill();				graphics.beginFill(0xFFFFFF, 1);				graphics.drawRoundRect(-30, 7, 20, 20, 5, 5);				graphics.endFill();				graphics.beginFill(0xAAAAAA, 1);				graphics.drawRoundRect(-25, 12, 10, 10, 3, 3);				graphics.endFill();				graphics.lineStyle(2, 0x777777, 1);				graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);				graphics.drawRoundRect(-30, 7, 20, 20, 5, 5);				graphics.drawRoundRect(-25, 12, 10, 10, 3, 3);			} else {				theValue = "FALSE";				var colorsC2:Array = [0xAAAAAA, 0xBBBBBB, 0x999999, 0x777777]; //sets the colors for the two halves of the gradient				var alphasC2:Array = [1, 1, 1, 1]; //sets both colors to opaque				var ratiosC2:Array = [0, 50, 200, 255]; //places starting point of colors using values from 0-255				var matrixC2:Matrix = new Matrix();				matrixC2.createGradientBox(bttnWidth, 35, 1.57, 0, 0);				graphics.clear();				graphics.beginGradientFill(GradientType.LINEAR, colorsC2, alphasC2, ratiosC2, matrixC2);				graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);				graphics.endFill();				graphics.beginFill(0xFFFFFF, 1);				graphics.drawRoundRect(-30, 7, 20, 20, 5, 5);				graphics.endFill();				graphics.lineStyle(2, 0x777777, 1);				graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);				graphics.drawRoundRect(-30, 7, 20, 20, 5, 5);			}			main.userData.postData(theVariable, theValue);			trace(theVariable + " = " + main.userData[theVariable]);		}				private function mouseOverListener(e:MouseEvent):void {			if (theValue=="FALSE") {				var colorsO:Array = [0xBBBBBB, 0xCCCCCC, 0xAAAAAA, 0x888888]; //sets the colors for the two halves of the gradient				var alphasO:Array = [1, 1, 1, 1]; //sets both colors to opaque				var ratiosO:Array = [0, 50, 200, 255]; //places starting point of colors using values from 0-255				var matrixO:Matrix = new Matrix();				matrixO.createGradientBox(bttnWidth, 35, 1.57, 0, 0);				graphics.clear();				graphics.beginGradientFill(GradientType.LINEAR, colorsO, alphasO, ratiosO, matrixO);				graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);				graphics.endFill();				graphics.beginFill(0xFFFFFF, 1);				graphics.drawRoundRect(-30, 7, 20, 20, 5, 5);				graphics.endFill();				graphics.lineStyle(2, 0x777777, 1);				graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);				graphics.drawRoundRect(-30, 7, 20, 20, 5, 5);			} else {				var colorsO2:Array = [0xBBBBBB, 0xCCCCCC, 0xAAAAAA, 0x888888]; //sets the colors for the two halves of the gradient				var alphasO2:Array = [1, 1, 1, 1]; //sets both colors to opaque				var ratiosO2:Array = [0, 50, 200, 255]; //places starting point of colors using values from 0-255				var matrixO2:Matrix = new Matrix();				matrixO2.createGradientBox(bttnWidth, 35, 1.57, 0, 0);				graphics.clear();				graphics.beginGradientFill(GradientType.LINEAR, colorsO2, alphasO2, ratiosO2, matrixO2);				graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);				graphics.endFill();				graphics.beginFill(0xFFFFFF, 1);				graphics.drawRoundRect(-30, 7, 20, 20, 5, 5);				graphics.endFill();				graphics.beginFill(0xAAAAAA, 1);				graphics.drawRoundRect(-25, 12, 10, 10, 3, 3);				graphics.endFill();				graphics.lineStyle(2, 0x777777, 1);				graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);				graphics.drawRoundRect(-30, 7, 20, 20, 5, 5);				graphics.drawRoundRect(-25, 12, 10, 10, 3, 3);			}		}				private function mouseOutListener(e:MouseEvent):void {			if (theValue=="FALSE") {				var colorsU:Array = [0xAAAAAA, 0xBBBBBB, 0x999999, 0x777777]; //sets the colors for the two halves of the gradient				var alphasU:Array = [1, 1, 1, 1]; //sets both colors to opaque				var ratiosU:Array = [0, 50, 200, 255]; //places starting point of colors using values from 0-255				var matrixU:Matrix = new Matrix();				matrixU.createGradientBox(bttnWidth, 35, 1.57, 0, 0);				graphics.clear();				graphics.beginGradientFill(GradientType.LINEAR, colorsU, alphasU, ratiosU, matrixU);				graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);				graphics.endFill();				graphics.beginFill(0xFFFFFF, 1);				graphics.drawRoundRect(-30, 7, 20, 20, 5, 5);				graphics.endFill();				graphics.lineStyle(2, 0x777777, 1);				graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);				graphics.drawRoundRect(-30, 7, 20, 20, 5, 5);			} else {				var colorsU2:Array = [0xAAAAAA, 0xBBBBBB, 0x999999, 0x777777]; //sets the colors for the two halves of the gradient				var alphasU2:Array = [1, 1, 1, 1]; //sets both colors to opaque				var ratiosU2:Array = [0, 50, 200, 255]; //places starting point of colors using values from 0-255				var matrixU2:Matrix = new Matrix();				matrixU2.createGradientBox(bttnWidth, 35, 1.57, 0, 0);				graphics.clear();				graphics.beginGradientFill(GradientType.LINEAR, colorsU2, alphasU2, ratiosU2, matrixU2);				graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);				graphics.endFill();				graphics.beginFill(0xFFFFFF, 1);				graphics.drawRoundRect(-30, 7, 20, 20, 5, 5);				graphics.endFill();				graphics.beginFill(0xAAAAAA, 1);				graphics.drawRoundRect(-25, 12, 10, 10, 3, 3);				graphics.endFill();				graphics.lineStyle(2, 0x777777, 1);				graphics.drawRoundRect(0, 0, bttnWidth, 35, 15, 15);				graphics.drawRoundRect(-30, 7, 20, 20, 5, 5);				graphics.drawRoundRect(-25, 12, 10, 10, 3, 3);			}		}	}}