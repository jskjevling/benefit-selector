package  {		import flash.display.*;	import flash.geom.*;	import flash.events.*;	import flash.net.*;	import flash.text.*;	import fl.transitions.*;	import fl.transitions.easing.*;	import flash.ui.*;	import flash.filters.*;		public class TextInput extends MovieClip {				internal var main:BenefitCalculator;		internal var inTransition:String;		internal var outTransition:String;		internal var theVariable:String;		internal var theValue:String;		internal var nxtAction:String;		internal var whichFile:String;		internal var nxtSlide:Number;		public function TextInput() {			init();		}		private function init():void {			//do nothing		}				public function createTextInput(textXPos:Number, textYPos:Number, textWidth:Number, txtVariable:String, txtInTrans:String, txtOutTrans:String, nxtA:String, whichF:String, nxtS:Number):void {			theVariable = txtVariable;			inTransition = txtInTrans;			outTransition = txtOutTrans;			nxtAction = nxtA;			whichFile = whichF;			nxtSlide = nxtS;			var colors:Array = [0xFBC230, 0xFBE882, 0xFBE882, 0xFBC230]; //sets the colors for the two halves of the gradient			var alphas:Array = [1, 1, 1, 1]; //sets both colors to opaque			var ratios:Array = [0, 50, 200, 255]; //places starting point of colors using values from 0-255			var matrix:Matrix = new Matrix();			matrix.createGradientBox(textWidth, 35, 1.57, 0, 0);			graphics.beginGradientFill(GradientType.LINEAR, colors, alphas, ratios, matrix);			graphics.drawRoundRect(0, 0, textWidth, 35, 15, 15);			graphics.endFill();			graphics.lineStyle(2, 0xB57C52, 1);			graphics.drawRoundRect(0, 0, textWidth, 35, 15, 15);			this.x = textXPos;			this.y = textYPos;			var myFont:Font = new AvenirR(); //create the instance of the embedded font class			var format:TextFormat = new TextFormat(myFont.fontName, 20, 0x666666); //create the text formatting			var t:TextField = new TextField(); //create the text field			t.type = TextFieldType.INPUT;			t.restrict = "0-9";			t.maxChars = 5;			t.embedFonts = true; //set it to use embedded fonts			t.defaultTextFormat = format; //apply the text format			t.sharpness = -100;			t.thickness = 200;			t.x = 10; //set the x position			t.y = 5; //set the y position			t.width = textWidth; //set the width of the display area/**/			t.addEventListener(KeyboardEvent.KEY_DOWN, textEnterListener, false, 0, true);			addChild(t); //add to this objects display list			if (inTransition=="BLINK") { //set up the properties for the BLINK transition				main.currentInput.alpha = 0;				main.currentInput.y = main.currentInput.y-50;			} else if (inTransition=="FADE") { //set up the properties of the FADE transition				main.currentInput.alpha = 0;			}			var filter:DropShadowFilter = new DropShadowFilter(10, 90, 0x966A09, 1, 25, 25, .4);			main.currentInput.filters = [filter];			main.slideContents.addChild(main.currentInput);			main.visualManager.callInputIn(main.currentInput);		}				private function textEnterListener(e:KeyboardEvent):void {			if (e.keyCode == Keyboard.ENTER) {				if (theVariable=="ZIPCODE") {					if (e.target.text.length == 5) {        				theValue = e.target.text;						main.audioManager.stopAudio();						main.goBack.visible = false;						main.userData.postData(theVariable, theValue);						trace(theVariable + " = " + main.userData[theVariable]);						main.visualManager.clearScreen(nxtAction, whichFile, nxtSlide);					}				} else if (theVariable=="DEPENDENTS") {					theValue = e.target.text;					main.audioManager.stopAudio();					main.goBack.visible = false;					main.userData.postData(theVariable, theValue);					trace(theVariable + " = " + main.userData[theVariable]);					main.visualManager.clearScreen(nxtAction, whichFile, nxtSlide);				}			}		}	}	}