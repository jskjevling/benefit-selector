package  {		import flash.display.*;	import flash.geom.*;	import flash.events.*;	import flash.net.*;	import flash.text.*;	import fl.transitions.*;	import fl.transitions.easing.*;	import flash.ui.*;		public class CreationManager extends MovieClip {				internal var main:BenefitCalculator;				internal var audioFile:String;				//these are text-related variables which hold the info from the slide XML while the object is being created.  Some are reused for textInput objects.				internal var textXPos:Number; //temp x variable for creating text		internal var textYPos:Number; //temp y variable for creating text		internal var textWidth:Number; //temp width for creating text		internal var isMultiline:Boolean; //temp multiline variable for creating text		internal var txtInTrans:String; //temp value for in transition		internal var txtOutTrans:String; //temp value for out transition		internal var txtValue:String; //temp text value for creating text				//variables used for text-input field XML data while field is being created on screen				internal var txtVar:String; //temp variable which describes the data recorded by text input fields		internal var txtNAction:String; //temp variable for the next action to be assigned to a textInput field		internal var txtWhichFile:String; //temp variable that describes the sound or animation to be played when the data is input		internal var txtNxtSlide:Number; //temp variable to hold the number of the next slide to access when the choice is selected.				//variables used for button choice data while button is being created on screen				internal var butXPos:Number;		internal var butYPos:Number;		internal var butWidth:Number;		internal var butLabel:String;		internal var butVar:String;		internal var butVal:String;		internal var butInTrans:String;		internal var butOutTrans:String;		internal var butNAction:String;		internal var butWhichFile:String;		internal var butNxtSlide:Number;				internal var checkXPos:Number;		internal var checkYPos:Number;		internal var checkWidth:Number;		internal var checkLabel:String;		internal var checkVar:String;		internal var checkVal:String;		internal var checkInTrans:String;		internal var checkOutTrans:String;				public function CreationManager() {			init();		}				private function init():void {			//do nothing		}				public function createSlide():void {			//add the slideContents movie clip to the main timeline to begin populating it			for (var n:int = main.slideContents.numChildren; n>0; n--) {				if (n!=0) {					main.slideContents.removeChildAt(0);				}			}			//loop through the elemts of the slide XML and handle each appropriately			for (var i:Number = 0; i<main.slideManager.slideData.*.length(); i++) { //parse the XML (using E4 syntax) and configure the screen based on node content								// checks the node to see if it's a CONFIG node.  If so, the values for the back, pause and mute button are derived from it				if (main.slideManager.slideData.*[i].name()=="CONFIG") {					if (main.slideManager.slideData.*[i].@BACKBUTTON=="NO") {						main.goBack.visible = false;					} else {						main.goBack.visible = true;					}					if (main.slideManager.slideData.*[i].@PLAYPAUSE=="NO") {						main.ppButton.visible = false;					} else {						main.ppButton.visible = true;					}					if (main.slideManager.slideData.*[i].@MUTEBUTTON=="NO") {						main.mButton.visible = false;					} else {						main.mButton.visible = true;					}					if (main.slideManager.slideData.*[i].@ICON=="NO") {						main.singleMale.visible = false;						main.singleMale1Dep.visible = false;						main.singleMale2Dep.visible = false;						main.singleFem.visible = false;						main.singleFem1Dep.visible = false;						main.singleFem2Dep.visible = false;						main.marriedMale.visible = false;						main.marriedMale1Dep.visible = false;						main.marriedMale2Dep.visible = false;						main.marriedFem.visible = false;						main.marriedFem1Dep.visible = false;						main.marriedFem2Dep.visible = false;					} else {						main.singleMale.visible = false;						main.singleMale1Dep.visible = false;						main.singleMale2Dep.visible = false;						main.singleFem.visible = false;						main.singleFem1Dep.visible = false;						main.singleFem2Dep.visible = false;						main.marriedMale.visible = false;						main.marriedMale1Dep.visible = false;						main.marriedMale2Dep.visible = false;						main.marriedFem.visible = false;						main.marriedFem1Dep.visible = false;						main.marriedFem2Dep.visible = false;						switch (main.userData.GENDER) {							case "MALE":								switch (main.userData.MSTATUS) {									case "SINGLE":										if (main.userData.DEPENDENTS=="0") {											main.singleMale.visible = true;										} else if (main.userData.DEPENDENTS=="1") {											main.singleMale1Dep.visible = true;										} else if (main.userData.DEPENDENTS=="2") {											main.singleMale2Dep.visible = true;										} else {											main.singleMale2Dep.visible = true;										}										break;									case "MARRIED":										if (main.userData.DEPENDENTS=="0") {											main.marriedMale.visible = true;										} else if (main.userData.DEPENDENTS=="1") {											main.marriedMale1Dep.visible = true;										} else if (main.userData.DEPENDENTS=="2") {											main.marriedMale2Dep.visible = true;										} else {											main.marriedFem2Dep.visible = true;										}										break;								}								break;							case "FEMALE":								switch (main.userData.MSTATUS) {									case "SINGLE":										if (main.userData.DEPENDENTS=="0") {											main.singleFem.visible = true;										} else if (main.userData.DEPENDENTS=="1") {											main.singleFem1Dep.visible = true;										} else if (main.userData.DEPENDENTS=="2") {											main.singleFem2Dep.visible = true;										} else {											main.marriedMale2Dep.visible = true;										}										break;									case "MARRIED":										if (main.userData.DEPENDENTS=="0") {											main.marriedFem.visible = true;										} else if (main.userData.DEPENDENTS=="1") {											main.marriedFem1Dep.visible = true;										} else if (main.userData.DEPENDENTS=="2") {											main.marriedFem2Dep.visible = true;										} else {											main.marriedFem2Dep.visible = true;										}										break;								}								break;						}					}									//checks to see if the node declares the audio to play first for the slide.  If it does, the parameters are set up.					} else if (main.slideManager.slideData.*[i].name()=="FIRSTAUDIO") {					audioFile = main.slideManager.slideData.*[i].@FILE;					main.audioManager.triggerAudio(audioFile);				} else if (main.slideManager.slideData.*[i].name()=="DISPLAYTXT") {					textXPos = main.slideManager.slideData.*[i].@XPOS;					textYPos = main.slideManager.slideData.*[i].@YPOS;					textWidth = main.slideManager.slideData.*[i].@WIDTH;					isMultiline = main.slideManager.slideData.*[i].@MULTILINE;					txtInTrans = main.slideManager.slideData.*[i].@INTRANSITION;					txtOutTrans = main.slideManager.slideData.*[i].@OUTTRANSITION;					txtValue = main.slideManager.slideData.*[i].@TEXT;					main.currentText = new LineText();					main.currentText.main = main;					main.textArray.push(main.currentText);					main.currentText.createText(textXPos, textYPos, textWidth, txtValue, txtInTrans, txtOutTrans);				} else if (main.slideManager.slideData.*[i].name()=="BUTTON") {					butXPos = main.slideManager.slideData.*[i].@XPOS;					butYPos = main.slideManager.slideData.*[i].@YPOS;					butWidth = main.slideManager.slideData.*[i].@WIDTH;					butLabel = main.slideManager.slideData.*[i].@LABEL;					butVar = main.slideManager.slideData.*[i].@VARIABLE;					butVal = main.slideManager.slideData.*[i].@VALUE;					butInTrans = main.slideManager.slideData.*[i].@INTRANSITION;					butOutTrans = main.slideManager.slideData.*[i].@OUTTRANSITION;					butNAction = main.slideManager.slideData.*[i].@NEXTACTION;					butWhichFile = main.slideManager.slideData.*[i].@WHICHFILE;					butNxtSlide = main.slideManager.slideData.*[i].@NEXTSLIDE;					main.currentButton = new ButtonChoice();					main.currentButton.main = main;					main.buttonArray.push(main.currentButton);					main.currentButton.createButton(butXPos, butYPos, butWidth, butLabel, butVar, butVal, butInTrans, butOutTrans, butNAction, butWhichFile, butNxtSlide);				} else if (main.slideManager.slideData.*[i].name()=="TXTINPUT") {					textXPos = main.slideManager.slideData.*[i].@XPOS;					textYPos = main.slideManager.slideData.*[i].@YPOS;					textWidth = main.slideManager.slideData.*[i].@WIDTH;					txtVar = main.slideManager.slideData.*[i].@VARIABLE;					txtNAction = main.slideManager.slideData.*[i].@NEXTACTION;					txtWhichFile = main.slideManager.slideData.*[i].@WHICHFILE;					txtNxtSlide = main.slideManager.slideData.*[i].@NEXTSLIDE;					txtInTrans = main.slideManager.slideData.*[i].@INTRANSITION;					txtOutTrans = main.slideManager.slideData.*[i].@OUTTRANSITION;					main.currentInput = new TextInput();					main.currentInput.main = main;					main.inputArray.push(main.currentInput);					main.currentInput.createTextInput(textXPos, textYPos, textWidth, txtVar, txtInTrans, txtOutTrans, txtNAction, txtWhichFile, txtNxtSlide);				} else if (main.slideManager.slideData.*[i].name()=="CHECKBOX") {					checkXPos = main.slideManager.slideData.*[i].@XPOS;					checkYPos = main.slideManager.slideData.*[i].@YPOS;					checkWidth = main.slideManager.slideData.*[i].@WIDTH;					checkLabel = main.slideManager.slideData.*[i].@LABEL;					checkVar = main.slideManager.slideData.*[i].@VARIABLE;					checkInTrans = main.slideManager.slideData.*[i].@INTRANSITION;					checkOutTrans = main.slideManager.slideData.*[i].@OUTTRANSITION;					main.currentCheckbox = new CheckboxOption();					main.currentCheckbox.main = main;					main.checkboxArray.push(main.currentCheckbox);					main.currentCheckbox.createCheckbox(checkXPos, checkYPos, checkWidth, checkLabel, checkVar, checkInTrans, checkOutTrans);				} else if (main.slideManager.slideData.*[i].name()=="NEXTBUTTON") {					butXPos = main.slideManager.slideData.*[i].@XPOS;					butYPos = main.slideManager.slideData.*[i].@YPOS;					butInTrans = main.slideManager.slideData.*[i].@INTRANSITION;					butOutTrans = main.slideManager.slideData.*[i].@OUTTRANSITION;					butNAction = main.slideManager.slideData.*[i].@NEXTACTION;					butWhichFile = main.slideManager.slideData.*[i].@WHICHFILE;					butNxtSlide = main.slideManager.slideData.*[i].@NEXTSLIDE;					main.currentNext = new NextButton();					main.currentNext.main = main;					main.nextArray.push(main.currentNext);					main.currentNext.createNext(butXPos, butYPos, butInTrans, butOutTrans, butNAction, butWhichFile, butNxtSlide);				}							}		}	}	}