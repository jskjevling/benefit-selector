package  {		import flash.display.*;	import flash.geom.*;	import flash.events.*;	import flash.net.*;	import flash.text.*;	import fl.transitions.*;	import fl.transitions.easing.*;	import flash.ui.*;	import flash.media.Sound;			public class BenefitCalculator extends Sprite {				/**					MillerCoors Benefit Calculator by iFractal			Author: Jeremy Schevling / www.subsystemdesign.com			Base class linked to BenefitCalculator.fla, all library elements are contained therein.			Additional class files located in the /src directory.				**/				private var sWidth:String = "960"; //the stage width used in the SWF constructor, use this to resize the entire movie		private var sHeight:String = "450"; //the stage height used in the SWF constructor, use this to resize the entire movie		internal var listPath:String = "xml/slideList.xml"; //the path to the XML list of individual slide XML file paths (tells the program what to load in what order)				internal var userData:UserData; //object to hold the user's data input		internal var slideManager:SlideManager; //the class responsible for handling the loading of the individual slide XML		internal var creationManager:CreationManager; //object that handles creation of the individual screen elements from XML data		internal var visualManager:VisualManager; //the object that handles all screen transitions		internal var actionManager:ActionManager; //object to handle the actions for buttons and text input fields.		internal var animationManager:AnimationManager; //object to handle called animations and delegation		internal var audioManager:AudioManager; //object to handle sounds		internal var slideContents:MovieClip; //container to hold the created slide				internal var currentText:LineText; //the temp variable to hold the line text being created by the creation manager		internal var textArray:Array; //the array containing text objects currently on screen.  This is used for transitions.		internal var currentInput:TextInput; //temp variable to hold the input field being created		internal var inputArray:Array; //array of input fields on screen.  used for transitions.		internal var currentButton:ButtonChoice;		internal var buttonArray:Array;		internal var currentCheckbox:CheckboxOption;		internal var checkboxArray:Array;		internal var currentNext:NextButton;		internal var nextArray:Array;		internal var currentAnimation:MovieClip;		internal var animationHolder:MovieClip;		internal var currentSound:Sound;				internal var cLogo:ClientLogo;  //the client logo displayed on screen		internal var singleMale:Icon_SMale;		internal var singleMale1Dep:Icon_SMale_1Dep;		internal var singleMale2Dep:Icon_SMale_2Dep;		internal var singleFem:Icon_SFem;		internal var singleFem1Dep:Icon_SFem_1Dep;		internal var singleFem2Dep:Icon_SFem_2Dep;		internal var marriedMale:Icon_MMale;		internal var marriedMale1Dep:Icon_MMale_1Dep;		internal var marriedMale2Dep:Icon_MMale_2Dep;		internal var marriedFem:Icon_MFem;		internal var marriedFem1Dep:Icon_MFem_1Dep;		internal var marriedFem2Dep:Icon_MFem_2Dep;		internal var goBack:BackButton; //the back button		internal var ppButton:PlayPause; //the pause button		internal var mButton:MuteButton; //the mute button		internal var xmlData:XML; //holds the loaded XML data		internal var xmlLoader:XMLLoader; //instance of the XMLLoader class which handles all XML files		internal var xmlLoaded:Boolean; //variable to track if the XML is loaded when XMLLoader.loadXML runs						[SWF(width=sWidth, height=sHeight, backgroundColor='#FFFFFF', frameRate='24')] //describes the SWF properties		public function BenefitCalculator() {			init();		}				private function init():void {			initVariables();			visualManager.drawBackground();			visualManager.addTopLayerNav();			slideManager.loadSlideList();		}				private function initVariables():void {			//as it sounds, this function initializes all the needed variables at runtime.			userData = new UserData();			xmlData = new XML();			xmlLoaded = false;			xmlLoader = new XMLLoader();			xmlLoader.main = this;			slideContents = new MovieClip();			slideManager = new SlideManager();			slideManager.main = this;			slideManager.currSlide = 0;			creationManager = new CreationManager();			creationManager.main = this;			textArray = new Array();			inputArray = new Array();			buttonArray = new Array();			checkboxArray = new Array();			nextArray = new Array();			visualManager = new VisualManager();			visualManager.main = this;			actionManager = new ActionManager();			actionManager.main = this;			animationManager = new AnimationManager();			animationHolder = new MovieClip();			animationManager.main = this;			audioManager = new AudioManager();			audioManager.main = this;		}	}	}