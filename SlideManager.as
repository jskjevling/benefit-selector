package  {		import flash.display.*;	import flash.geom.*;	import flash.events.*;	import flash.net.*;	import flash.text.*;	import fl.transitions.*;	import fl.transitions.easing.*;	import flash.ui.*;		public class SlideManager extends MovieClip {				internal var main:BenefitCalculator; //reference to the main class		internal var slideList:XML; //the xml list of slides to show in the presentation		internal var totalSlides:Number; //the total slides in the presentation		internal var currSlide:Number; //the variable to keep track of the current slide		internal var prevSlide:Number; //the variable to keep track of the previous slide in the branching		internal var slides:Array; //the array containing the paths to the various slide XML files		internal var visitedSlides:Array;		internal var slideData:XML; //the XML data for the current slide		public function SlideManager() {			init();		}				private function init():void {			slides = new Array();			visitedSlides = new Array();		}				public function loadSlideList():void {						//load the list of slides in the presentation, drop that list into an array						main.xmlLoader.loadXML(main.listPath);			main.addEventListener(Event.ENTER_FRAME, listLoader, false, 0, true);			//the functionality is continued in the listLoader function since we must wait until the XML has loaded		}				private function listLoader(e:Event):void {						//called repeatedly from the loadSlideList function to execute once it is verified that the XML has loaded, pushing the values to an array						if (main.xmlLoaded==true) {				slideList = main.xmlData; //transfer the loaded XML data to the slideList variable				for (var i:Number = 0; i<slideList.children().length(); i++) { //push the XML file paths into an array for later use					slides.push(slideList.children()[i].@PATH);				}				totalSlides = slides.length;				main.xmlLoaded = false; //reset the xmlloader's variable				main.xmlData = null; //clear out the temp XML data				main.removeEventListener(Event.ENTER_FRAME, listLoader, false); //remove the event listener that triggered the function				loadSlide(); //load the first slide in the list			}		}				public function loadSlide():void {			main.xmlLoader.loadXML(slides[currSlide]);			main.addEventListener(Event.ENTER_FRAME, slideLoader, false, 0, true);  //THIS COULD POSE A SCOPE PROBLEM IF THE slideLoader REFERENCE IS NULL			//functionality continued in the slideLoader function since we must wait for the XML to load		}				private function slideLoader(e:Event):void {						//called repeatedly from the loadFirstSLide function to execute once it is verified that the XML has loaded, pushing the values to an array						if (main.xmlLoaded==true) {				slideData = main.xmlData; //transfer the loaded XML data to the slideList variable				main.xmlLoaded = false; //reset the xmlloader's variable				main.xmlData = null; //clear out the temp XML data				main.removeEventListener(Event.ENTER_FRAME, slideLoader, false); //remove the event listener that triggered the function				main.creationManager.createSlide();			}		}				internal function goToPrevSlide():void {			currSlide = visitedSlides[visitedSlides.length-1];			loadSlide();			visitedSlides.pop();		}	}	}